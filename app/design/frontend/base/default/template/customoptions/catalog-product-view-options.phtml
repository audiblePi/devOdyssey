<?php
/**
 * MageWorx
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the MageWorx EULA that is bundled with
 * this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.mageworx.com/LICENSE-1.0.html
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade the extension
 * to newer versions in the future. If you wish to customize the extension
 * for your needs please refer to http://www.mageworx.com/ for more information
 *
 * @category   MageWorx
 * @package    MageWorx_CustomOptions
 * @copyright  Copyright (c) 2014 MageWorx (http://www.mageworx.com/)
 * @license    http://www.mageworx.com/LICENSE-1.0.html
 */

/**
 * Advanced Product Options extension
 *
 * @category   MageWorx
 * @package    MageWorx_CustomOptions
 * @author     MageWorx Dev Team
 */

$_options = Mage::helper('core')->decorateArray($this->getOptions());
$helper = $this->helper('customoptions');

$currencySymbol = Mage::app()->getLocale()->currency($this->getProduct()->getStore()->getCurrentCurrencyCode())->getSymbol();
if (!$currencySymbol) $currencySymbol= $this->getProduct()->getStore()->getCurrentCurrencyCode();

$coreHelper = $this->helper('core');
$thumbnailsSize = $helper->getImagesThumbnailsSize();
if (!$thumbnailsSize) $thumbnailsSize = 70;

if (count($_options) || ((string)Mage::getConfig()->getModuleConfig('OrganicInternet_SimpleConfigurableProducts')->active == 'true' && $this->getProduct()->isConfigurable())) { ?>
    <style type="text/css">
        .option div.container-swatch-color {
            display:inline-block;
            width:<?php echo $thumbnailsSize ?>px; 
            height:<?php echo $thumbnailsSize ?>px;
        }        
    </style>
    <!--[if lte IE 7]>
        <style type="text/css">
            .option li.swatch {float:left;}
        </style>
    <![endif]-->
    <script type="text/javascript">
        //<![CDATA[
        var optionFileUpload = {
            productForm : $('product_addtocart_form'),
            formAction : '',
            formElements : {},
            upload : function(element){
                this.formElements = this.productForm.getElementsBySelector('input', 'select', 'textarea', 'button');
                this.removeRequire(element.readAttribute('id').sub('option_', ''));

                template = '<iframe id="upload_target" name="upload_target" style="width:0; height:0; border:0;"><\/iframe>';

                Element.insert($('option_'+element.readAttribute('id').sub('option_', '')+'_uploaded_file'), {after: template});

                this.formAction = this.productForm.action;
                this.productForm.action = '<?php echo $this->getUrl('*/product/upload') ?>option_id/'+element.readAttribute('id').sub('option_', '');
                this.productForm.target = 'upload_target';
                this.productForm.submit();
                this.productForm.target = '';
                this.productForm.action = this.formAction;
            },
            removeRequire: function(skipElementId){
                for(var i=0; i<this.formElements.length; i++){
                    if (this.formElements[i].readAttribute('id') != 'option_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                        this.formElements[i].disabled='disabled';
                    }
                }
            },
            addRequire: function(skipElementId){
                for(var i=0; i<this.formElements.length; i++){
                    if (this.formElements[i].readAttribute('name') != 'options_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                        this.formElements[i].disabled='';
                    }
                }
            },
            uploadCallback: function(data){
                this.addRequire(data.optionId);
                $('upload_target').remove();

                if (data.error) {

                } else {
                    $('option_'+data.optionId+'_uploaded_file').value = data.fileName;
                    $('option_'+data.optionId+'_file').value = '';
                    $('option_'+data.optionId+'_file').hide();
                    $('option_'+data.optionId+'').hide();
                    template = '<div id="option_'+data.optionId+'_file_box"><a href="#"><img src="var/options/'+data.fileName+'"><\/a><a href="#" onclick="optionFileUpload.removeFile('+data.optionId+')">Remove file<\/a>';

                    Element.insert($('option_'+data.optionId+'_uploaded_file'), {after: template});
                }
            },
            removeFile: function(optionId) {
                $('option_'+optionId+'_uploaded_file').value= '';
                $('option_'+optionId+'_file').show();
                $('option_'+optionId+'').show();

                $('option_'+optionId+'_file_box').remove();
            }
        };
        
        var optionTextCounter = {
            count : function(field,cntfield,maxlimit){
                if (field.value.length > maxlimit){
                    field.value = field.value.substring(0, maxlimit);
                } else {
                    cntfield.innerHTML = maxlimit - field.value.length;
                }
            }
        };
        
        Product.Options = Class.create();
        Product.Options.prototype = {
            initialize : function(config){
                this.config = config;
                this.reloadPrice();
            },
            taxOptions: [],
            productTax: false,
            getProductQty: function() {
                var qty = 1;
                if ($('qty') && !isNaN(parseInt($('qty').getValue()))) {
                    var qty = parseInt($('qty').getValue());
                    if (qty <= 0 || qty > 1) qty = 1; // MageWorx Fix: condition "|| qty > 1" was added
                }
                return qty;
            },
            getProductPriceByQty: function() {
                if (this.productTax===false) this.productTax = optionsPrice.currentTax;
                
                var prQty = this.getProductQty();
                var prPrice = <?php echo floatval($coreHelper->currency($this->getProduct()->getFinalPrice(), false, false)) ?>;
                <?php
                    $priceArr = $this->getProduct()->getFormatedTierPrice();
                    if (is_array($priceArr)) {
                        foreach ($priceArr as $priceRow) {?>
                            if (prQty >= <?php echo intval($priceRow['price_qty'])?>) prPrice = <?php echo floatval($coreHelper->currency($priceRow['price'], false, false)) ?>;
                        <?php }
                    }
                ?>
                return prPrice;
            },
            getOptionPriceByQty: function(opConfig, opQty, optionId, valueId) {
                var opPrice = parseFloat(opConfig['price']);
                if (opConfig['price_type']=='percent' && opPrice!=0) {
                    opPrice = this.getProductPriceByQty() * (opPrice/100);
                }
                var prQty = this.getProductQty();
                if (isNaN(opQty)) opQty = 1;
                <?php if ($helper->isTierPriceEnabled()) { ?>
                    if (typeof(opConfig['tier_prices']!='undefined')) {
                        for (var tierQty in opConfig['tier_prices']) {
                            if (!opConfig['tier_prices'].hasOwnProperty(tierQty)) continue;
                            if ((this.config[optionId]['is_onetime']==0 && prQty*opQty >= tierQty) || (opQty >= tierQty)) {
                                opPrice = parseFloat(opConfig['tier_prices'][tierQty]);
                            }
                        }
                    }
                <?php } ?>
                var totalOpPrice = opPrice * opQty;
                if (this.config[optionId]['is_onetime']==0) {
                    totalOpPrice = totalOpPrice * prQty;
                }
                
                if (totalOpPrice>0 && typeof(opConfig['tax'])!='undefined') {
                    this.taxOptions.push([opConfig['tax'], totalOpPrice]);
                }
                return totalOpPrice;
            },
            getOldOptionPriceByQty: function(opConfig, opQty, optionId) {
                if (opConfig['old_price']>0) {
                    var opPrice = parseFloat(opConfig['old_price']);
                } else {
                    var opPrice = parseFloat(opConfig['price']);
                }
                if (opConfig['price_type']=='percent' && opPrice!=0) {
                    opPrice = <?php echo floatval($coreHelper->currency($this->getProduct()->getFinalPrice(), false, false)) ?> * (opPrice/100);
                }
                var prQty = this.getProductQty();
                if (isNaN(opQty)) opQty = 1;
                if (this.config[optionId]['is_onetime']==0) return opPrice * prQty * opQty;
                return opPrice * opQty;
            },
            <?php if ($helper->isTierPriceEnabled()) { ?>
            getOptionTierPriceHTML: function(el, opConfig) {
                var opPrice = parseFloat(opConfig['price']);
                var tierPrice = 0;
                var tierSaved = 0;
                var tierHTML = '<ul id="option_tier_prices_'+el.value+'" class="tier-prices product-pricing" style="width:250px;">';
                for (var tierQty in opConfig['tier_prices']) {
                    if (!opConfig['tier_prices'].hasOwnProperty(tierQty)) continue;
                    tierPrice = opConfig['tier_prices'][tierQty];
                    tierSaved = parseInt(100 - ((parseFloat(tierPrice) * 100) / opPrice));
                    tierHTML += '<li><?php echo $helper->__js('Buy') ?> '+tierQty+' <?php echo $helper->__js('for') ?> <span class="price"><?php echo $currencySymbol ?>'+tierPrice+'</span> <?php echo $helper->__js('each') ?> <?php echo $helper->__js('and') ?> <strong class="benefit"><?php echo $helper->__js('save') ?> '+tierSaved+'%</strong></li>';
                }
                tierHTML += '</ul>';
                return tierHTML;
            },
            <?php } ?>
            reloadOptionTierPriceBlock: function(el){
            <?php if ($helper->isTierPriceEnabled()) { ?>
                var optionId = 0;
                el.name.sub(/[0-9]+/, function(match){
                    optionId = match[0];
                });
                if (!optionId) return false;
                if (el.type=='radio' || el.type=='checkbox') {
                    if (!el.value) return false;
                    if (el.checked) {
                        if (!$('option_tier_prices_'+el.value) && typeof(this.config[optionId][el.value]['tier_prices'])!='undefined') {
                            Element.insert(el.up('li'), {'bottom':this.getOptionTierPriceHTML(el, this.config[optionId][el.value])});
                        }
                    } else {
                        if ($('option_tier_prices_'+el.value)) {
                            $('option_tier_prices_'+el.value).remove();
                        }
                    }
                } else if (el.type=='select-one' || el.type=='select-multiple') {
                    $A(el.options).each(function(selOp) {
                        if (selOp.value) {
                            if (selOp.selected) {
                                if (!$('option_tier_prices_'+selOp.value) && typeof(this.config[optionId][selOp.value]['tier_prices'])!='undefined') {
                                    Element.insert(el.up('dd'), {'bottom':this.getOptionTierPriceHTML(selOp, this.config[optionId][selOp.value])});
                                }
                            } else {
                                if ($('option_tier_prices_'+selOp.value)) {
                                    $('option_tier_prices_'+selOp.value).remove();
                                }
                            }
                        }
                    }.bind(this));
                }
            <?php } ?>
            },
            reloadPrice: function() {
                this.taxOptions = [];
                var price = 0;
                var oldPrice = 0;
                var config = this.config;
                var skipIds = [];
                $$('.product-custom-option').each(function(element){
                    var optionId = 0;
                    element.name.sub(/[0-9]+/, function(match){
                        optionId = match[0];
                    });
                    if (config[optionId] && !element.disabled) {
                        var configOptions = config[optionId];
                        
                        if (element.type == 'radio') {
                            this.reloadOptionTierPriceBlock(element);
                            if (element.checked && typeof(configOptions[element.getValue()])!='undefined') {
                                if ($('options_'+optionId+'_qty')) optionQty = parseInt($('options_'+optionId+'_qty').value); else optionQty = 1;
                                price += this.getOptionPriceByQty(configOptions[element.getValue()], optionQty, optionId, element.value);
                                oldPrice += this.getOldOptionPriceByQty(configOptions[element.getValue()], optionQty, optionId);
                            }
                        } else if(element.type == 'checkbox') {
                            this.reloadOptionTierPriceBlock(element);
                            if (element.checked && typeof(configOptions[element.getValue()])!='undefined') {
                                if ($('options_'+optionId+'_'+element.value+'_qty')) optionQty = parseInt($('options_'+optionId+'_'+element.value+'_qty').value); else optionQty = 1;
                                price += this.getOptionPriceByQty(configOptions[element.getValue()], optionQty, optionId, element.value);
                                oldPrice += this.getOldOptionPriceByQty(configOptions[element.getValue()], optionQty, optionId);
                            }
                        } else if(element.hasClassName('datetime-picker') && !skipIds.include(optionId)) {
                            dateSelected = true;
                            $$('.product-custom-option[id^="options_' + optionId + '"]').each(function(dt){
                                if (dt.getValue() == '') {
                                    dateSelected = false;
                                }
                            });
                            if (dateSelected) {
                                if (typeof(configOptions['price'])!='undefined') {
                                    price += this.getOptionPriceByQty(configOptions, 1, optionId, 0);
                                    oldPrice += this.getOldOptionPriceByQty(configOptions, 1, optionId);
                                }
                                skipIds[optionId] = optionId;
                            }
                        } else if (element.type == 'select-one') {
                            this.reloadOptionTierPriceBlock(element);
                            if (element.options) {
                                // qty 
                                if ($('options_'+optionId+'_qty')) optionQty = parseInt($('options_'+optionId+'_qty').value); else optionQty = 1;
                                $A(element.options).each(function(selectOption){
                                    if (selectOption.selected && typeof(configOptions[selectOption.value])!='undefined') {                                        
                                        price += this.getOptionPriceByQty(configOptions[selectOption.value], optionQty, optionId, selectOption.value);
                                        oldPrice += this.getOldOptionPriceByQty(configOptions[selectOption.value], optionQty, optionId);
                                    }
                                }.bind(this));
                            }
                        } else if(element.type == 'select-multiple') {
                            this.reloadOptionTierPriceBlock(element);
                            if (element.options) {
                                $A(element.options).each(function(selectOption){
                                    if (selectOption.selected && typeof(configOptions[selectOption.value])!='undefined') {
                                        if ($('options_'+optionId+'_'+selectOption.value+'_qty')) optionQty = parseInt($('options_'+optionId+'_'+selectOption.value+'_qty').value); else optionQty = 1;
                                        price += this.getOptionPriceByQty(configOptions[selectOption.value], optionQty, optionId, selectOption.value);
                                        oldPrice += this.getOldOptionPriceByQty(configOptions[selectOption.value], optionQty, optionId);
                                    }
                                }.bind(this));
                            }
                        } else if(element.type == 'hidden') {
                            if (!element.disabled && typeof(configOptions[element.getValue()])!='undefined') {
                                price += this.getOptionPriceByQty(configOptions[element.getValue()], 1, optionId, element.value);
                                oldPrice += this.getOldOptionPriceByQty(configOptions[element.getValue()], 1, optionId);
                            }
                        } else {
                            if (element.getValue().strip()!='') {
                                if (typeof(configOptions['price'])!='undefined') {
                                    price += this.getOptionPriceByQty(configOptions, 1, optionId, 0);
                                    oldPrice += this.getOldOptionPriceByQty(configOptions, 1, optionId);
                                }
                            }
                        }
                    }
                }.bind(this));                
                try {
                    <?php if ((string)Mage::getConfig()->getModuleConfig('FME_Csvpricing')->active != 'true') { ?>
                    	optionsPrice.productPrice = this.getProductPriceByQty() * this.getProductQty();
                    	optionsPrice.productOldPrice = (<?php echo floatval($coreHelper->currency($this->getProduct()->getPrice(), false, false)) ?> * this.getProductQty()) + oldPrice - price;
                    <?php } ?>                    
                    
                    <?php if ($helper->getProductAbsolutePrice($this->getProduct())) { ?>
                        if (price>0) {
                            optionsPrice.productPrice = 0;
                            optionsPrice.productOldPrice = oldPrice - price;
                        }
                    <?php } ?>
                   
                    <?php if ($this->getProduct()->getTypeId()=='configurable') { ?>
                         var confOpPrice = 0;
                         if(optionsPrice.optionPrices.config) {
                             confOpPrice = optionsPrice.optionPrices.config.price * (this.getProductQty() - 1);
                         }
                         if (confOpPrice > 0) {
                             optionsPrice.productPrice += confOpPrice;
                             optionsPrice.productOldPrice += confOpPrice;
                         }
                     <?php } ?>
                   
                    optionsPrice.changePrice('options', price);

                    // tax correction
                    var totalOpTaxCorr = 0;
                    this.taxOptions.each(function(taxData){
                        var opTaxCorr = taxData[0] - this.productTax;
                        opTaxCorr = (taxData[1] / (optionsPrice.productPrice + price)) * opTaxCorr;
                        totalOpTaxCorr += opTaxCorr;
                    }.bind(this));
                    optionsPrice.currentTax = this.productTax + totalOpTaxCorr;
                    
                    // magento bug fixed
                    optionsPrice.tierPrices = [];
                    
                    optionsPrice.reload();
                } catch (e) {}
            }
        };
        
        <?php if ($this->getProduct()->getTypeId()=='configurable') { ?>
            if (typeof(spConfig)!='undefined') {
                var parentSpConfigReloadPrice = spConfig.reloadPrice.bind(spConfig);
                spConfig.reloadPrice = function() {
                    parentSpConfigReloadPrice();
                    opConfig.reloadPrice();
                };
            }
        <?php } ?>
        
        function validateOptionsCallback(elmId, result){
            
            var container = $(elmId).up('ul.options-list');
            if (result == 'failed') {
                $(container).removeClassName('validation-passed');
                $(container).addClassName('validation-failed');
            } else {
                $(container).removeClassName('validation-failed');
                $(container).addClassName('validation-passed');
            }
        }
        var opConfig = new Product.Options(<?php echo $helper->getOptionsJsonConfig($this->getOptions()) ?>);
        var valueId, optionId;
        var enableAll = false;
        var inputs = new Array();
        function nodeAnalysis (currentNode) {
            var name = currentNode.nodeName.toLowerCase();
            switch (name)
            {
                case 'option' :
                    inputs.push(currentNode);
                    break;
                case 'input' :
                    if (currentNode.type=='checkbox' || currentNode.type=='radio') {
                        inputs.push(currentNode);
                    }
                    break;
                default : break;
            }
            for (var i = 0; i < currentNode.childNodes.length; i++) {
                if (currentNode.childNodes[i].nodeType == 1) {
                    nodeAnalysis(currentNode.childNodes[i]);
                }
            }
        }
        
        
        // set qty product from option
        var optionSetQtyProduct = {
            setQty: function() {
                if (!$('qty')) {
                    setTimeout('optionSetQtyProduct.setQty()', 500);
                    return;
                }                
                var totalQty = 0;
                var elArr = $$("input[id^='options_']:checked", "select[id^='select_']");
                
                if (elArr.length>0) {
                    elArr.each(function(el) {
                        var elIdArr = el.id.split('_');
                        var optionId = 0;
                    	if (elIdArr[1]) optionId = elIdArr[1];
                        
                        var elValueArr = [];
                        if (el.multiple) {
                            for (i=0; i < el.options.length; i++) {
                                if (el.options[i].selected) elValueArr.push(el.options[i].value);
                            }
                        } else {
                            elValueArr.push(el.value);
                        }
                        elValueArr.each(function(valueId) {
                            if (optionId && opConfig.config[optionId] && opConfig.config[optionId][valueId] && opConfig.config[optionId][valueId].x_qty) {
                                if ($('options_'+optionId+'_qty')) {
                                    var optionQty = parseInt($('options_'+optionId+'_qty').value);
                                } else if ($('options_'+optionId+'_'+valueId+'_qty')) {
                                    var optionQty = parseInt($('options_'+optionId+'_' + valueId + '_qty').value);
                                } else {
                                    var optionQty = 1;
                                }
                                totalQty += opConfig.config[optionId][valueId].x_qty * optionQty;
                            }
                        }.bind(this));
                    }.bind(this));
                }
                if (totalQty==0) totalQty = 1;
                if ($('qty').value!=totalQty) this.setTotalQty(totalQty);                
            },
            setTotalQty: function(qty) {
                var minimalQty = <?php echo intval($this->getParentBlock()->getProductDefaultQty()) ?>;
                if (minimalQty>0 && minimalQty>qty) qty = minimalQty;
                $('qty').value = qty;
                opConfig.reloadPrice();
            },
            hideQty: function() {
                if (!$('qty')) {
                    setTimeout('optionSetQtyProduct.hideQty()', 100);
                    return;
                }                
                //$('qty').previous('label').style.visibility = 'hidden';
                //$('qty').style.visibility = 'hidden';
                $('qty').writeAttribute('readonly', 'readonly');
            },
            checkboxQty: function(el) {
                var elIdArr = el.id.split('_');
                var optionId = 0;
                if (elIdArr[1]) optionId = elIdArr[1];
                
                var elQty = $('options_'+ optionId +'_'+ el.value +'_qty');
                if (!elQty) return;
                elQty.disabled=!el.checked;
                
                if (el.checked) {
                    if (elQty.value<=0) elQty.value = 1;
                    $(elQty).addClassName('validate-greater-than-zero');
                } else {
                    elQty.value = 0;
                    $(elQty).removeClassName('validate-greater-than-zero');
                }
            },
            multiSwatchQty: function(optionId, valueId, selected) {
                var elQty = $('options_'+ optionId +'_'+ valueId +'_qty');
                if (!elQty) return;
                elQty.disabled = !selected;
                
                if (selected) {
                    if (elQty.value<=0) elQty.value = 1;
                    $(elQty).addClassName('validate-greater-than-zero');
                } else {
                    elQty.value = 0;
                    $(elQty).removeClassName('validate-greater-than-zero');
                }
            },
            // limit qty functions:
            limitQtyData: {},
            setLimitQty: function(el) {
                var elIdArr = el.id.split('_');
                var optionId = 0;
                if (elIdArr[1]) optionId = elIdArr[1];

                var elValueArr = [];
                if (el.multiple) {
                    for (i=0; i < el.options.length; i++) {
                        if (el.options[i].selected) elValueArr.push(el.options[i].value);
                    }
                } else {
                    elValueArr.push(el.value);
                }
                elValueArr.each(function(valueId) {
                    if (optionId && opConfig.config[optionId] && opConfig.config[optionId][valueId] && opConfig.config[optionId][valueId].l_qty) {
                        var limit = parseInt(opConfig.config[optionId][valueId].l_qty);
                        if (dependentOptions && dependentOptions.dependentData[valueId]) {
                            dependentOptions.dependentData[valueId].each(function(IGI){
                                if (dependentOptions.inGroupIdData[IGI]) {
                                    for(var dElementId in dependentOptions.inGroupIdData[IGI]) {
                                        if (dElementId!='dependency' && dElementId!='out_of_stock' && dElementId!='view_mode' && $(dElementId)) {
                                            var elIdArr = dElementId.split('_');
                                            var dOptionId = 0;
                                            if (elIdArr[1]) dOptionId = elIdArr[1];
                                            this.limitQtyData[dOptionId] = limit; // set limit
                                            this.checkLimitQty(dOptionId);
                                        }
                                    }
                                }
                            }.bind(this));
                        }
                    }
                }.bind(this));
            },
            checkLimitQty: function(optionId, changedEl) {
                if (!optionId) return;
                
                var limit = 0;
                if (this.limitQtyData[optionId]) limit = this.limitQtyData[optionId];
                if (opConfig.config[optionId] && opConfig.config[optionId].max_characters) {
                    if (limit==0 || limit>opConfig.config[optionId].max_characters) limit = opConfig.config[optionId].max_characters;
                }
                if (limit==0) return;
                
                var totalQty = 0;
                var elArr = $$("input[id^='options_"+ optionId +"_']:checked", "select[id='select_"+ optionId +"']", "textarea[id='options_"+ optionId +"_text']", "input[id='options_"+ optionId +"_text']");
                
                if (elArr.length>0) {
                    elArr.each(function(el) {
                        var elIdArr = el.id.split('_');
                        var optionId = 0;
                    	if (elIdArr[1]) optionId = elIdArr[1];
                        
                        var elValueArr = [];
                        if (el.multiple) {
                            for (i=0; i < el.options.length; i++) {
                                if (el.options[i].selected) elValueArr.push(el.options[i].value);
                            }
                        } else {
                            if (el.value) elValueArr.push(el.value);
                        }
                        elValueArr.each(function(valueId) {
                            if ($('options_'+optionId+'_qty')) {
                                var optionQty = parseInt($('options_'+optionId+'_qty').value);
                            } else if ($('options_'+optionId+'_'+valueId+'_qty')) {
                                var optionQty = parseInt($('options_'+optionId+'_' + valueId + '_qty').value);
                            } else if ($('options_'+ optionId +'_text')) {
                                var optionQty = $('options_'+ optionId +'_text').value.length;
                            } else {
                                var optionQty = 1;
                            }
                            totalQty += optionQty;
                        }.bind(this));
                    }.bind(this));
                }
                
                
                var restQty = limit - totalQty;
                if ($('total_limit_' + optionId)) $('total_limit_' + optionId).innerHTML = limit - totalQty;
                if (restQty<0 && changedEl) {
                    if (parseInt(changedEl)>0) {
                        // swatch uncheck
                        optionSwatch.select(optionId, changedEl);
                    } else if ($(changedEl).hasClassName('qty')) {
                        var qty = parseInt(changedEl.value);
                        qty = qty + restQty;
                        if (qty<1) qty = 1;
                        changedEl.value = qty;
                        $(changedEl).onchange();
                    } else if ($(changedEl).hasClassName('checkbox')) {
                        $(changedEl).click();
                    } else if ($(changedEl).hasClassName('input-text') || $(changedEl).hasClassName('text-area')) {
                        // text
                        changedEl.value = changedEl.value.substr(0, limit);
                    }
                    this.checkLimitQty(optionId, false);
                }
            }
        };
        
        // swatch class
        var optionSwatch = {
            select: function(optionId, optionValueId) {
                var el = $('swatch_' + optionValueId);
                if (el && $(el).hasClassName('swatch-disabled')) return false;
                
                // change value
                var el = $('select_' + optionId);
                if (!el) return;
                for (i=0; i < el.options.length; i++) {
                    if (el.options[i].value && el.options[i].value==optionValueId) {
                        el.options[i].selected = !el.options[i].selected;
                    }
                }
                $(el).onchange();
            },
            change:function(el) {
                if (!el || !el.id) return;
                optionId = el.id.replace('select_', '');
                
                //change border
                var ul = $('ul_swatch_' + optionId);
                if (!ul) return;
                
                var span = $('span_swatch_' + optionId);
                if (span) span.remove();
                
                <?php if ($helper->isDependentEnabled()) { ?>
                // dependent
                var lis = ul.getElementsByTagName('li');
                for (i=0; i < lis.length; i++) {
                    lis[i].hide();
                    $(lis[i]).addClassName('swatch-disabled');
                }

                for (i=0; i < el.options.length; i++) {
                    if (el.options[i].value) {
                        var li = $('swatch_' + el.options[i].value);
                        if (li) {
                            li.show();
                            if (el.disabled==false && el.options[i].disabled==false) $(li).removeClassName('swatch-disabled');
                        }
                    }
                }
                <?php } ?>
                
                var noteText = [];
                for (i=0; i < el.options.length; i++) {
                    if (el.options[i].value) {
                        var li = $('swatch_' + el.options[i].value);
                        if (li) {                            
                            if (el.options[i].selected) {
                                var swatchEl = li.down('.swatch');
                                if (swatchEl) swatchEl.removeClassName('swatch').addClassName('swatch-selected');
                                // change title
                                if (el.options[i].text!='') {
                                    noteText.push(el.options[i].text);
                                }
                            } else {
                                var swatchEl = li.down('.swatch-selected');
                                if (swatchEl) swatchEl.removeClassName('swatch-selected').addClassName('swatch');
                            }
                            optionSetQtyProduct.multiSwatchQty(optionId, el.options[i].value, el.options[i].selected);
                        }
                    }
                }
                if (noteText.length>0) {
                    var dtEl = ul.up('dl').down('dt');
                    var pNoteEl = dtEl.down('p.note');
                    var tagtipEl = dtEl.down('div.tagtip-question');
                    var spanSwatch  = '<span id="span_swatch_' + optionId + '"> - ' + noteText.join(', ') + '</span>';
                    if (pNoteEl) {
                        Element.insert($(pNoteEl), {'before':spanSwatch});
                    } else if (tagtipEl) {
                        Element.insert($(tagtipEl), {'after':spanSwatch});
                    } else {
                        dtEl.innerHTML += spanSwatch;
                    }
                }
                opConfig.reloadPrice();
                // x5, x10
                if (el.readAttribute('onchange').indexOf('optionSetQtyProduct.setQty')>0) optionSetQtyProduct.setQty();
            }
        };
        
        // images class
        var optionImages = {
            ulId: ['div.product-img-box div.more-views ul', 'div.img-box div.more-images ul'],
            mainImageUrl: '',
            mainImageThumbnail: '',
            mainImageTitle: '',
            mainImageWidth: 240,
            newMainImageUrl: '',
            newMainImageThumbnail: '',
            newMainImageTitle: '',
            newMainImageIndex: 0,
            prevMainImageUrl: '',
            overlayZIndex: 80,
            pageLoaded: false,
            dataImageIndex: false,
            
            showImage: function(el) {
                if (!el || !el.id) return;
                
                var elIdArr = el.id.split('_');
                var optionId = 0;
                if (elIdArr[1]) optionId = elIdArr[1];
                
                var elValueArr = [];                    
                if (el.multiple) {
                    for (i=0; i < el.options.length; i++) {
                        if (el.options[i].selected) elValueArr.push(el.options[i].value);
                    }
                } else {
                    elValueArr.push(el.value);
                }
                
                if (!opConfig.config[optionId]) return;
                var imageHTML = '';
                var mainImageHTML = '';
                
                var imageMode = opConfig.config[optionId].image_mode;
                var excludeFirstImage = opConfig.config[optionId].exclude_first_image;
                
                if (imageMode==1) {
                    // beside option variant
                    var imageBox = $('customoptions_images_' + optionId);
                    if (!imageBox) return;
                    
                    imageBox.hide();
                    elValueArr.each(function(optionValueId) {
                        if (optionValueId!='' && opConfig.config[optionId][optionValueId] && opConfig.config[optionId][optionValueId].images) {
                            opConfig.config[optionId][optionValueId].images.each(function(image) {
                                if (image[1]) {
                                    imageHTML += '<a href="'+image[1]+'" rel="mageworxLightbox[]" title="">'+
                                        '<img src="'+image[0]+'" title="" class="small-image-preview v-middle" />'+
                                    '</a>';
                                } else {
                                    imageHTML += '<div class="container-swatch-color small-image-preview v-middle"">'+
                                        '<div class="swatch-color" style="background:' + image[0] + ';">&nbsp;</div>'+
                                    '</div>';
                                }
                            }.bind(this));
                        }
                    }.bind(this));
                    imageBox.innerHTML = imageHTML;
                    imageBox.show();
                } else if (imageMode==4) {
                    // Overlay Main Image
                    var mainImage = this.getMainImage();
                    if (mainImage) {
                        if (!mainImage.src) {
                            mainImage = mainImage.down('img');
                            if (!mainImage) return;
                    	}
                        // remove prev overlay_image
                        if (el.type=='radio') {
                            var radios = el.up(2).getElementsByClassName('radio');
                            for (i=0; i < radios.length; i++) {
                                if (!radios[i].checked) {
                                    var overlayImage = $('overlay_image_' + radios[i].value);
                                    if (overlayImage) overlayImage.remove();
                                }
                            }
                        } else if (el.type=='checkbox') {
                            if (!el.checked) {
                                var overlayImage = $('overlay_image_' + el.value);
                                if (overlayImage) overlayImage.remove();
                            }
                        } else {
                            // drop-down, multiselect
                            for (i=0; i < el.options.length; i++) {
                                if (!el.options[i].selected && el.options[i].value) {
                                    var overlayImage = $('overlay_image_' + el.options[i].value);
                                    if (overlayImage) overlayImage.remove();
                                }
                            }
                        }

                        if (((el.type=='checkbox' || el.type=='radio') && el.checked && !el.disabled) || ((el.type=='select-one' || el.type=='select-multiple') && el.value!='')) {
                            // overlay option image
                            elValueArr.each(function(optionValueId) {
                                if (optionValueId!='' && opConfig.config[optionId][optionValueId] && opConfig.config[optionId][optionValueId].images) {
                                    opConfig.config[optionId][optionValueId].images.each(function(image, index) {
                                        if (((excludeFirstImage==0 && index==0) || index > 0) && image[1]) {
                                            var overlayImageId = 'overlay_image_' + optionValueId;
                                            var overlayImage = $(overlayImageId);
                                            if (!overlayImage) {
                                                mainImage.up(1).style.position = 'relative';
                                                
                                                var overlayImage = new Image();
                                                overlayImage.width = mainImage.width;
                                                overlayImage.height = mainImage.height;
                                                overlayImage.style.display = 'none';
                                                overlayImage.style.position = 'absolute';
                                                overlayImage.style.top = 0;
                                                overlayImage.style.left = 0;
                                                overlayImage.style.zIndex = this.overlayZIndex;
                                                this.overlayZIndex++;
                                                overlayImage.id = overlayImageId;
                                                overlayImage.src = image[1];
                                                Element.insert(mainImage, {'after':overlayImage});
                                                overlayImage.show();
                                            }
                                        }
                                    }.bind(this));
                                }
                            }.bind(this));
                        }
                    }
                } else {
                    // replace and append variant
                    var ul = $$(this.ulId.join(', ')).first();
                    var optionClass = 'option-image-'+optionId;
                    if (el.type=='checkbox') optionClass += '-' + el.value;
                    
                    var productImageLis = $$(this.ulId.join(' li.li-product-image, ') + ' li.li-product-image');
                    
                    // hide product gallery
                    if (imageMode==2 && productImageLis) {
                        productImageLis.each(function(li) {
                            li.hide();
                        });
                    }
                    
                    // remove option images
                    $$('li.' + optionClass).each(function(li) {
                        li.remove();
                    });                    
                    if (typeof(ProductMediaManager)=='undefined') {
                        $$('img.' + optionClass).each(function(img) {
                            img.remove();
                        });
                    }

                    // set default main image
                    this.newMainImageUrl = this.mainImageUrl;
                    this.newMainImageTitle = this.mainImageTitle;
                    this.newMainImageThumbnail = this.mainImageThumbnail;
                    this.newMainImageIndex = 0; 
                    
                    if (((el.type=='checkbox' || el.type=='radio') && el.checked && !el.disabled) || ((el.type=='select-one' || el.type=='select-multiple') && el.value!='')) {
                        var liHtml = '';
                        if (ul) {
                            // var li = ul.down('li');
                            var li = productImageLis.last();
                            if (this.dataImageIndex===false) this.dataImageIndex = $$(this.ulId.join(' li, ') + ' li').length;
                            if (li) {
                                liHtml = ul.down('li').innerHTML;
                                liHtml = liHtml.replace(/(data\-image\-index\=[\'\"])[0-9]+?([\'\"])/,"$1{{data_image_index}}$2");
                                if (typeof(ProductMediaManager)=='undefined') liHtml = liHtml.replace(/https?\:\/\/.+?([\'\"])/,"{{big_image_url}}$1");
                                liHtml = liHtml.replace(/https?\:\/\/.+?([\'\"])/g,"{{small_image_url}}$1");
                                liHtml = liHtml.replace(/(\s(?:title|alt)\=[\'\"]).*?([\'\"])/g,"$1{{title}}$2");
                                liHtml = '<li class="' + optionClass + '">' + liHtml + '</li>';
                            }
                        }
                        var imageBox = $('customoptions_images_' + optionId);
                        if (imageBox) imageBox.hide();

                        // append option images
                        elValueArr.each(function(optionValueId) {
                            
                            if (optionValueId!='' && opConfig.config[optionId][optionValueId] && opConfig.config[optionId][optionValueId].images) {
                                opConfig.config[optionId][optionValueId].images.each(function(image, index) {
                                    if ((excludeFirstImage==0 && index==0) || index > 0) {
                                        if (liHtml) {
                                            if (image[1]) {
                                                imageHTML += liHtml.replace(new RegExp("{{data_image_index}}",'g'), this.dataImageIndex).replace(new RegExp("{{big_image_url}}",'g'), image[1]).replace(new RegExp("{{small_image_url}}",'g'), image[0]).replace(new RegExp("{{title}}",'g'), opConfig.config[optionId][optionValueId].title);
                                                if (typeof(ProductMediaManager)!='undefined') mainImageHTML += '<img id="image-'+ this.dataImageIndex +'" class="gallery-image '+ optionClass +'" data-zoom-image="'+ image[1] +'" src="'+ image[1] +'">';
                                                this.dataImageIndex++;
                                            }
                                        } else {
                                            if (index==0 || (excludeFirstImage==1 && index==1)) {
                                                this.newMainImageUrl = image[1];
                                                this.newMainImageThumbnail = image[1];
                                                this.newMainImageTitle = opConfig.config[optionId][optionValueId].title;
                                            }
                                        }
                                    } else if (el.type=='select-one' || el.type=='select-multiple') {
                                        if (imageBox) {                    
                                            imageBox.hide();
                                            imageBox.innerHTML = '<a href="'+image[1]+'" rel="mageworxLightbox[]" title="">'+
                                                '<img src="'+image[0]+'" title="" class="small-image-preview v-middle" />'+
                                            '</a>';;
                                            imageBox.show();
                                        }
                                    }
                                }.bind(this));
                            }
                        }.bind(this));
                        if (imageHTML) ul.innerHTML += imageHTML;
                        
                        // for ProductMediaManager
                        if (mainImageHTML) {
                            var mainImageDiv = this.getMainImage().up('div');
                            if (mainImageDiv) mainImageDiv.innerHTML += mainImageHTML;
                        }
                    }
                    
                    // show product gallery
                    if (!this.hasOptionImages() && productImageLis) {
                        productImageLis.each(function(li) {
                            li.show();
                        });
                    }
                    
                    $$('.cloud-zoom-gallery').each(function(a) { 
                        if (a.up('li').style.display=='') a.up('li').style.display = 'list-item';
                        a.addClassName('cboxElement');
                        jQuery(a).CloudZoom();
                    });
                    
                    if (typeof(ProductMediaManager)!='undefined') ProductMediaManager.init();
                    
                    // change main image
                    if (imageMode==2) {
                        if (typeof(ProductMediaManager)=='undefined') this.changeMainImage(); else setTimeout('optionImages.changeMainImage()', 100);
                    }
                    
                }
            },
            markProduct: function() {
                $$(this.ulId.join(' li, ') + ' li').each(function(li) {
                    li.addClassName('li-product-image');
                });
                
                if (this.mainImageUrl=='') {
                    var mainImage = this.getMainImage();
                    if (mainImage) {
                    	if (mainImage.hasClassName('MagicToolboxContainer')) {
                            var elA = mainImage.down('a');
                            if (elA) {
                                this.mainImageUrl = elA.href;
                                var elImg = elA.down('img');
                                if (elImg.width) this.mainImageWidth = elImg.width;
                                this.mainImageThumbnail = elImg.src;
                                this.mainImageTitle = elImg.alt;
                            }
                        } else if (mainImage.hasClassName('zoom-image') || (mainImage.up('a') && mainImage.up('a').hasClassName('cloud-zoom'))) {
                            // Easy Zoom 1.0 - jQuery plugin
                            // Cloud Zoom V1.0.2
                            var elA = mainImage.up('a');
                            if (elA) {
                                this.mainImageUrl = elA.href;
                            } else {
                                this.mainImageUrl = mainImage.src;
                            }
                            this.mainImageTitle = mainImage.alt;
                            this.mainImageThumbnail = mainImage.src
                        } else {
                            this.mainImageUrl = mainImage.src;
                            this.mainImageTitle = mainImage.alt;
                    	}
                    }
                }
                this.prevMainImageUrl = this.mainImageUrl;
            },
            getMainImage: function() {
                return $$('div.product-img-box div.MagicToolboxContainer', 'div.product-img-box div.main-image img', 'div.product-img-box .product-image img', '#image', '#image-main', 'div.img-box .product-image img').first();
            },
            changeMainImage: function() {
                if (!this.newMainImageUrl || this.newMainImageUrl==this.prevMainImageUrl) return;
                var mainImage = this.getMainImage();
                if (!mainImage) return;
                
                if (!this.pageLoaded) {
                    mainImage.hide();
                    setTimeout('optionImages.changeMainImage()', 100);
                    return;
                }
                
                if (mainImage.hasClassName('MagicToolboxContainer')) {
                    var elA = mainImage.down('a');
                    if (elA) {
                    	elA.down('img').width = this.mainImageWidth;
                    	MagicZoomPlus.update(elA.id, this.newMainImageUrl, this.newMainImageThumbnail, 'show-title: false; drag-mode: false');
                    }
                } else if (typeof(ProductMediaManager)!='undefined') {
                    $$(this.ulId.join(' li, ') + ' li').each(function(li) {
                        var elA = li.down('a');
                        if (elA && elA.readAttribute('data-image-index')==this.newMainImageIndex) {
                            elA.click();
                        }
                    }.bind(this)); 
                } else if (mainImage.hasClassName('zoom-image')) {
                    //  Easy Zoom 1.0 - jQuery plugin
                    var elA = mainImage.up('a');
                    if (elA) elA.href = this.newMainImageUrl;
                    mainImage.src = this.newMainImageUrl;
                    mainImage.alt = this.newMainImageTitle;
                    mainImage.title = this.newMainImageTitle;                	
                    jQuery('#zoom').easyZoom({parent: 'div.zoom-container',	preload: '', lightboxBtn: '.lightbox-btn .lightbox'}).data('easyZoom').gallery('a.zoom-thumbnail');
                } else if (mainImage.up('a') && mainImage.up('a').hasClassName('cloud-zoom')) {
                    // ultimo + Cloud Zoom V1.0.2
                    var elA = mainImage.up('a');
                    if (elA) elA.href = this.newMainImageUrl;
                    mainImage.src = this.newMainImageUrl;
                    mainImage.alt = this.newMainImageTitle;
                    mainImage.title = this.newMainImageTitle;
                    
                    if ($("zoom-btn")) {
                        $("zoom-btn").href = this.newMainImageUrl;
                        $("zoom-btn").title = this.newMainImageTitle;
                    }
                    jQuery("#"+elA.id).CloudZoom();
                } else {
                    mainImage.src = this.newMainImageUrl;
                    mainImage.alt = this.newMainImageTitle;
                    mainImage.title = this.newMainImageTitle;
                }
                this.prevMainImageUrl = this.newMainImageUrl;
                mainImage.show();
            },
            hasOptionImages: function() {
                var result = false;
                var firstImageUrl = '';
                
                $$(this.ulId.join(' li, ') + ' li').each(function(li) {
                    if (li.hasClassName('li-product-image')==false) {
                        // change main image
                        if (!firstImageUrl) {
                            var firstImageMatch = li.innerHTML.match(/(https?\:\/\/.+?)[\'\"]/);
                            if (firstImageMatch) firstImageUrl = firstImageMatch[1];
                            this.newMainImageUrl = firstImageUrl;
                            this.newMainImageThumbnail = firstImageUrl;
                            this.newMainImageTitle = li.down('img').alt;
                            if (typeof(ProductMediaManager)!='undefined') this.newMainImageIndex = li.down('a').readAttribute('data-image-index');
                        }
                        result = true;
                    }
                }.bind(this));
                return result;
            }
        };
        
        Event.observe(window, 'load', function() {
            opConfig.reloadPrice();
        });

     <?php if ($helper->isDependentEnabled()) { ?>
            var dependentOptions = {
                dependentData: <?php echo $helper->getJsonDependentData($this->getOptions()) ?>,
                inGroupIdData: <?php echo $helper->getJsonInGroupIdData($this->getOptions()) ?>,
                defaultData: <?php echo $helper->getJsonDefaultData($this->getOptions()) ?>,
                
                dependentChanges: {"m":[], "d":[]},
                dependentHide: <?php if ($helper->hideDependentOption()) echo 'true'; else echo 'false'; ?>,
                select: function(el) {
                    var i, ii = 0;                    
                    if (el.type=='radio') {
                        var radios = this.upDiv(el).getElementsByClassName('radio');
                        for (i=0; i < radios.length; i++) {
                            this.returnSelect(radios[i]);
                        }                        
                    } else {
                        this.returnSelect(el);
                    }
                    
                    if (el.type && el.type=='checkbox' && !el.checked) {
                        this.decorateIsLast();
                        return false;
                    }
                    if (el.disabled) return false;
                    if (el.value>0) {
                        // prepare value
                        var elValueArr = [];
                        if (el.multiple) {
                            for (i=0; i < el.options.length; i++) {
                                if (el.options[i].selected) elValueArr.push(el.options[i].value);
                            }
                        } else {
                            elValueArr.push(el.value);
                        }
                        var mElementId = el.id;
                        var dSelects = [];
                        var isRequire = false;
                        for (i=0; i < elValueArr.length; i++) {
                            if (!this.dependentData[elValueArr[i]]) continue;
                            this.dependentData[elValueArr[i]].each(function(IGI){
                                if (this.inGroupIdData[IGI]) {                                    
                                    for(var dElementId in this.inGroupIdData[IGI]) {
                                        if (dElementId!='dependency' && dElementId!='out_of_stock' && dElementId!='view_mode' && $(dElementId)) {
                                            if (this.inGroupIdData[IGI][dElementId]) {
                                                
                                                var dElement = $(dElementId);
                                                if (!this.dependentChanges['m'][mElementId]) this.dependentChanges['m'][mElementId] = [];
                                                if (!this.dependentChanges['m'][mElementId][dElementId]) this.dependentChanges['m'][mElementId][dElementId] = [];
                                                this.dependentChanges['m'][mElementId][dElementId]['disabled'] = true;
                                                if (this.dependentChanges['m'][mElementId][dElementId]['is_require']) {
                                                    isRequire = true;
                                                } else {
                                                    isRequire = $(dElement).hasClassName('required-dependent');
                                                }
                                                this.dependentChanges['m'][mElementId][dElementId]['is_require'] = isRequire;
                                                
                                                if (!this.dependentChanges['d'][dElementId]) this.dependentChanges['d'][dElementId] = [];
                                            
                                                if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) {
                                                    // if [multi]select
                                                    var selectValue = 's'+this.inGroupIdData[IGI][dElementId];
                                                    // if el not modified -> backup default options and clear
                                                    if (!this.dependentChanges['d'][dElementId]['options']) {
                                                        this.dependentChanges['d'][dElementId]['options'] = [];
                                                        var opSelected = false;
                                                        for (ii=0; ii < dElement.options.length; ii++) {
                                                            if (this.defaultData[dElementId] && (this.defaultData[dElementId]==dElement.options[ii].value || this.defaultData[dElementId][dElement.options[ii].value])) opSelected = true; else opSelected = false;
                                                            if (dElement.options[ii].value) this.dependentChanges['d'][dElementId]['options']['s'+dElement.options[ii].value] = {'text':dElement.options[ii].text, 'selected':opSelected, 'sel-def':opSelected, 'disabled':dElement.options[ii].disabled};
                                                        }
                                                        if (dElement.multiple) dElement.length = 0; else dElement.length = 1; // clear select
                                                    }
                                                    if (this.dependentChanges['d'][dElementId]['options'][selectValue]) {
                                                        // set [multi]select flag use
                                                        if (!this.dependentChanges['d'][dElementId]['options'][selectValue]['use']) this.dependentChanges['d'][dElementId]['options'][selectValue]['use'] = [];
                                                        this.dependentChanges['d'][dElementId]['options'][selectValue]['use'].push(mElementId);
                                                        this.dependentChanges['d'][dElementId]['options'][selectValue]['dependency'] = this.inGroupIdData[IGI].dependency;
                                                        
                                                        // commit changes
                                                        if (!this.dependentChanges['m'][mElementId][dElementId]['options']) this.dependentChanges['m'][mElementId][dElementId]['options'] = [];
                                                        this.dependentChanges['m'][mElementId][dElementId]['options'].push(selectValue);
                                                    }
                                                } else {
                                                    // if radio, checkbox, text, etc.
                                                    if (!this.dependentChanges['d'][dElementId]['use']) this.dependentChanges['d'][dElementId]['use'] = [];
                                                    this.dependentChanges['d'][dElementId]['use'].push(mElementId);
                                                    this.dependentChanges['d'][dElementId]['dependency'] = this.inGroupIdData[IGI].dependency;
                                                }
                                                
                                                if ((this.dependentChanges['d'][dElementId]['use'] && this.dependentChanges['d'][dElementId]['use'].length >= this.inGroupIdData[IGI].dependency) || ((dElement.type=='select-one' || dElement.type=='select-multiple') && this.dependentChanges['d'][dElementId]['options'][selectValue] && this.dependentChanges['d'][dElementId]['options'][selectValue]['use'].length >= this.inGroupIdData[IGI].dependency)) {
                                                    // set visibility
                                                    if (!this.inGroupIdData[IGI].out_of_stock) dElement.disabled = false;
                                                    if (this.dependentHide && this.inGroupIdData[IGI].view_mode!=2) {
                                                        if (dElement.type=='checkbox' || dElement.type=='radio') {
                                                            $(dElement).up('li').style.display = 'block';
                                                        }
                                                        dependentOptions.upDiv(dElement).style.display = 'block';
                                                    }
                                                    // set class required-entry
                                                    if (isRequire) {
                                                        $(dElement).removeClassName('required-dependent');
                                                        if (dElement.type=='checkbox' || dElement.type=='radio') {
                                                            $(dElement).addClassName('validate-one-required-by-name');
                                                        } else {
                                                            $(dElement).addClassName('required-entry');
                                                        }    
                                                    }
                                                    // add or init dependent element
                                                    if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) {
                                                        // if [multi]select
                                                        var selectValue = 's'+this.inGroupIdData[IGI][dElementId];
                                                        if (this.dependentChanges['d'][dElementId]['options'][selectValue]) {
                                                            dSelects.push(dElement); // after add data to this [multi]select
                                                        }
                                                    } else {
                                                        // if radio, checkbox, text, etc.
                                                        if (this.defaultData[dElementId] && ($(dElementId).type=='checkbox' || $(dElementId).type=='radio') && this.inGroupIdData[IGI].dependency==this.dependentChanges['d'][dElementId]['use'].length) $(dElementId).click();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }.bind(this));
                        }
                        if (dSelects.length>0) {
                            for (i=0; i < dSelects.length; i++) {
                                var dElement = dSelects[i];
                                var dElementId = dElement.id;
                                // add data to [multi]select
                                this.rememberNewSelected(dElement, dElementId);
                                if (dElement.multiple) dElement.length = 0; else dElement.length = 1; // clear select                                
                                for(var opValue in this.dependentChanges['d'][dElementId]['options']) {
                                    if (!this.dependentChanges['d'][dElementId]['options'].hasOwnProperty(opValue) || !this.dependentChanges['d'][dElementId]['options'][opValue] || !this.dependentChanges['d'][dElementId]['options'][opValue]['use'] || this.dependentChanges['d'][dElementId]['options'][opValue]['use'].length < this.dependentChanges['d'][dElementId]['options'][opValue]['dependency']) continue;
                                    var newOpt = new Option(this.dependentChanges['d'][dElementId]['options'][opValue]['text'], opValue.substr(1));
                                    newOpt.disabled = this.dependentChanges['d'][dElementId]['options'][opValue]['disabled'];
                                    if (this.dependentChanges['d'][dElementId]['options'][opValue]['selected']) {
                                        newOpt.selected = true;
                                        //if (!newOpt.disabled) setTimeout('dependentOptions.select($("'+dElementId+'"));', '100');
                                    }
                                    dElement.options.add(newOpt);
                                }
                                dElement.onchange();
                            }
                        }
                        this.decorateIsLast();
                    }
                },
                // cancel changes and return default options params
                returnSelect: function(el) {
                    var mElementId = el.id;
                    var i = 0;
                    if (this.dependentChanges['m'][mElementId] && !this.dependentChanges['m'][mElementId]['is_used']) {
                        this.dependentChanges['m'][mElementId]['is_used'] = true;
                        for(var dElementId in this.dependentChanges['m'][mElementId]) {
                            if (!this.dependentChanges['m'][mElementId].hasOwnProperty(dElementId) || dElementId=='is_used' || !$(dElementId)) continue;
                            var dElement = $(dElementId);
                            var disableElFlag = true;
                            // disable dependent el
                            if (this.dependentChanges['m'][mElementId][dElementId]['disabled']) {
                                
                                if (this.dependentChanges['m'][mElementId][dElementId]['options'] && this.dependentChanges['d'][dElementId]['options']) {
                                    // to [multi]select                                    
                                    this.rememberNewSelected(dElement, dElementId);
                                    
                                    // remove options if not use main el
                                    for (i=0; i < this.dependentChanges['m'][mElementId][dElementId]['options'].length; i++) {
                                        opValue = this.dependentChanges['m'][mElementId][dElementId]['options'][i];
                                        
                                        if (this.dependentChanges['d'][dElementId]['options'][opValue] && this.dependentChanges['d'][dElementId]['options'][opValue]['use'] && this.dependentChanges['d'][dElementId]['options'][opValue]['use'].length>0) {
                                            this.dependentChanges['d'][dElementId]['options'][opValue]['use'] = this.dependentChanges['d'][dElementId]['options'][opValue]['use'].without(mElementId);
                                            if (this.dependentChanges['d'][dElementId]['options'][opValue]['use'].length < this.dependentChanges['d'][dElementId]['options'][opValue]['dependency']) {
                                                $$("#"+dElementId+" option[value='"+opValue.substr(1)+"']").each(function(elOp){
                                                    <?php if ($helper->isTierPriceEnabled()) { ?>
                                                        if (elOp.value && $('option_tier_prices_'+elOp.value)) {
                                                            $('option_tier_prices_'+elOp.value).remove();
                                                        }
                                                    <?php } ?>
                                                    elOp.remove();
                                                });
                                            } else {
                                                disableElFlag = false;
                                            }
                                        }
                                    }
                                    if (disableElFlag && (dElement.length>1 || (dElement.multiple && dElement.length>0))) disableElFlag = false;
                                    dElement.onchange();
                                } else {                                    
                                    // to radio, checkbox, text, etc.
                                    if (this.dependentChanges['d'][dElementId]['use'] && this.dependentChanges['d'][dElementId]['use'].length > 0) {                                        
                                        this.dependentChanges['d'][dElementId]['use'] = this.dependentChanges['d'][dElementId]['use'].without(mElementId);
                                        if (this.dependentChanges['d'][dElementId]['use'].length >= this.dependentChanges['d'][dElementId]['dependency']) disableElFlag = false;
                                    }
                                }
                                if (disableElFlag) {
                                    dElement.disabled = true;
                                    
                                    // restore default if [multi]select
                                    if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) {
                                        for(var opValue in this.dependentChanges['d'][dElementId]['options']) {
                                            if (!this.dependentChanges['d'][dElementId]['options'].hasOwnProperty(opValue) || !this.dependentChanges['d'][dElementId]['options'][opValue]) continue;
                                            var newOpt = new Option(this.dependentChanges['d'][dElementId]['options'][opValue]['text'], opValue.substr(1));
                                            newOpt.disabled = this.dependentChanges['d'][dElementId]['options'][opValue]['disabled'];
                                            newOpt.selected = this.dependentChanges['d'][dElementId]['options'][opValue]['sel-def'];
                                            dElement.options.add(newOpt);
                                        }
                                        dElement.onchange();
                                    }
                                    
                                    // hide
                                    if (this.dependentHide) {
                                        var hideDivFlag = true;
                                        if (dElement.type=='checkbox' || dElement.type=='radio') {
                                            $(dElement).up('li').style.display = 'none';
                                            ulEl = $(dElement).up('li').up('ul');
                                            if (ulEl) {
                                                lis = ulEl.getElementsByTagName('li');
                                                for (i=0; i < lis.length; i++) {
                                                    if (lis[i].style.display=='block') {
                                                        hideDivFlag = false;
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (hideDivFlag) this.upDiv(dElement).style.display = 'none';
                                    }
                                    
                                    // require
                                    if (this.dependentChanges['m'][mElementId][dElementId]['is_require']) {
                                        if (dElement.type=='checkbox' || dElement.type=='radio') {
                                            $(dElement).removeClassName('validate-one-required-by-name');
                                        } else {
                                            $(dElement).removeClassName('required-entry');
                                        }                                
                                        $(dElement).addClassName('required-dependent');
                                    }
                                    
                                    optionImages.showImage(dElement);
                                }
                            }
                            // return dependent->dependent etc..
                            if (disableElFlag && (dElement.type=='checkbox' || dElement.type=='radio') && dElement.checked) {
                                dElement.checked = false;
                                if (dElement.type=='checkbox') optionSetQtyProduct.checkboxQty(dElement);
                                dependentOptions.returnSelect(dElement);
                            } else if ((dElement.type=='select-one' || dElement.type=='select-multiple') && !$(dElement).hasClassName('datetime-picker')) {
                                dependentOptions.select(dElement); // that's right!
                            } else if (disableElFlag && (dElement.type=='text' || dElement.type=='textarea' || dElement.type=='file')) {
                                if (this.defaultData[dElementId]) dElement.value = this.defaultData[dElementId]; else dElement.value = '';
                            }                            
                        }
                        delete this.dependentChanges['m'][mElementId];
                    }    
                },
                rememberNewSelected: function(dElement, dElementId) {
                    // remember new selected
                    if (this.dependentChanges['d'][dElementId] && this.dependentChanges['d'][dElementId]['options']) {
                        var opSelected = false;
                        for (i=0; i < dElement.options.length; i++) {
                            if (this.dependentChanges['d'][dElementId]['options']['s'+dElement.options[i].value]) {
                                if (dElement.options[i].selected && dElement.options[i].value>0) opSelected = true; else opSelected = false;
                                this.dependentChanges['d'][dElementId]['options']['s'+dElement.options[i].value]['selected'] = opSelected;
                            }
                        }
                    }
                },
                // for ie to work
                upDiv: function(el) {   
                    if (el.type=='checkbox' || el.type=='radio') {
                        var div = el.up(4);
                        if (!$(div).hasClassName('option')) div = div.up(1);
                        return div;
                    } else {
                        return el.up('div.option');
                    }
                },
                decorateIsLast: function() {            
                    var divs = $$('div.option');
                    if (divs) {
                        var dl = false;
                        var dd = false;
                        divs.each(function(div, index){
                            if (div.style.display!='none' && !$(div).hasClassName('hidden')) {
                                dl = div.down('dl');
                                if (dl) {
                                    if ($(dl).hasClassName('last')) $(dl).removeClassName('last');
                                    dd = dl.down('dd');
                                    if (dd && $(dd).hasClassName('last')) $(dd).removeClassName('last');
                                }
                            }
                        }.bind(this));
                        if (dl) $(dl).addClassName('last');
                        if (dd) $(dd).addClassName('last');
                    }
                },                
                applyDefaultValues: function(el) {            
                    for(var elementId in this.defaultData) {
                        if (!this.defaultData.hasOwnProperty(elementId)) continue;
                        if ($(elementId) && this.upDiv($(elementId)) && this.upDiv($(elementId)).style.display!="none") {                    
                            this.returnSelect($(elementId));
                            if ($(elementId).type=='select-one' || $(elementId).type=='text' || $(elementId).type=='textarea') {
                                $(elementId).value = this.defaultData[elementId];
                            } else if ($(elementId).type=='select-multiple') {
                                el = $(elementId);
                                for (i=0; i < el.options.length; i++) {
                                    if (this.defaultData[elementId][el.options[i].value]) el.options[i].selected = true;
                                }
                            } else if ($(elementId).type=='checkbox' || $(elementId).type=='radio') {
                                if ($(elementId).checked!=true) $(elementId).click();
                            }    
                            this.select($(elementId));
                        }
                    }                     
                }
                
            };
            
            // for correct decorating of options
            if (typeof(decorateGeneric)!='undefined') {
                var parentDecorateGeneric = decorateGeneric;    
                decorateGeneric = function(elements, decorateParams) {
                    parentDecorateGeneric(elements, decorateParams);
                    dependentOptions.decorateIsLast();
                };
            }
    <?php } ?>
        //]]>
    </script>
    <?php
    $isFirstOption = true;
    $hideOptionsWrapperFlag = true; 
    foreach ($_options as $_option) {        
        echo $this->getOptionHtml($_option, $isFirstOption);
        if ($_option->getViewMode()==1) $hideOptionsWrapperFlag = false;
     }
     if ($this->getProduct()->isConfigurable()) $hideOptionsWrapperFlag = false;
     ?>
    <script type="text/javascript"> 
    <?php if ($hideOptionsWrapperFlag) { ?>
        if ($('product-options-wrapper')) $('product-options-wrapper').hide();
    <?php } 
    if ($this->getProduct()->getIsXQtyEnabled()) { ?>
        optionSetQtyProduct.hideQty();
    <?php } ?>
        
    // onchange -> product price update by qty
    document.observe('dom:loaded', function() {
        if ($('qty')) $('qty').writeAttribute('onchange','opConfig.reloadPrice()');
        <?php if ($this->getProduct()->getIsXQtyEnabled()) { ?>optionSetQtyProduct.setQty();<?php } ?>
    });
    
    Event.observe(window, 'load', function() {
        optionImages.markProduct();
        optionImages.pageLoaded = true;
        
        $$("select[id^='select_'].product-custom-option").each(function(element){
            element.onchange();
        });
        
        $$("input[id^='options_'].product-custom-option:checked").each(function(element) {
            element.onclick();
        });
        
        <?php if ($helper->isDependentEnabled()) { ?>               
            // apply edit or options default
            dependentOptions.applyDefaultValues();
            dependentOptions.decorateIsLast();
        <?php } ?>
        
        // validate and scroll to element
        var parentValidatorValidate = productAddToCartForm.validator.validate.bind(productAddToCartForm.validator);    
        productAddToCartForm.validator.validate = function() {
            var result = parentValidatorValidate();
            
            // fix focus
            if(!result && this.options.focusOnError) {
                try{
                    var element = Form.getElements(this.form).findAll(function(elm) {
                        if ($(elm).hasClassName('validation-failed') || ($(elm).up('ul') && $(elm).up('ul').hasClassName('validation-failed'))) {
                            return $(elm);
                        }
                    }).first();
                    element.up('dl').scrollTo();
                } catch(e){}   
            }
            
            // for swatch validation
            $$(".product-options ul.validation-failed[id^='ul_swatch_']").each(function(el){
                $(el).removeClassName('validation-failed');
            });
            $$('.product-options select.validation-failed').each(function(el){
                if ($(el).hasClassName('hidden')) {
                    $(el).removeClassName('validation-failed');
                    $(el).up('dd').down('ul').addClassName('validation-failed');
                }
            });
            
            return result;
        }.bind(productAddToCartForm.validator);
    });
    </script>
<?php } ?>